{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "24804012",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.75"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd                                           #pandas provide methods to deal with csv files\n",
    "from sklearn.tree import DecisionTreeClassifier               #provides ml tools\n",
    "from sklearn.model_selection import train_test_split          #used to split data for traning and testing\n",
    "from sklearn.metrics import accuracy_score                    #used to check accuracy of the model\n",
    "from sklearn import tree                                      #helps to visualise the decision tree\n",
    "#from sklearn.externals import joblib                          #helps to save and load the trained model\n",
    "\n",
    "\n",
    "#openning csv file\n",
    "music_data = pd.read_csv('music.csv')       \n",
    "X = music_data.drop(columns = 'genre')                                #X is the input (gender and age)\n",
    "Y = music_data['genre']                                               #Y is the output (genre)\n",
    "\n",
    "#splitting data for training and testing\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y,             #spitting data into 80%:20% train:test \n",
    "                                                    test_size=0.2)    #(randomly splits)\n",
    "\n",
    "\n",
    "#creating prediction model, training and testing\n",
    "model = DecisionTreeClassifier()                      #decision tree object\n",
    "model.fit(X_train,Y_train)                            #method to provide data\n",
    "predictions = model.predict(X_test)                   #method to predict from input values (20% of gender and age)\n",
    "\n",
    "\n",
    "#saving the trained model from next time no need to train\n",
    "#instead do -> model = joblib.load('music-recommender.joblib')\n",
    "#to save do -> joblib.dump(model,'music-recommender.joblib')\n",
    "\n",
    "\n",
    "#calculationg the accuracy of model\n",
    "score = accuracy_score(Y_test,predictions)            #Y_test is actual value and predictions \n",
    "                                                      #are predicted values measures the accuracy range is 0-1\n",
    "\n",
    "    \n",
    "#saving the descition tree visually which the model uses to predict results\n",
    "tree.export_graphviz(model,out_file='music-recommender.dot',            \n",
    "                     feature_names=['age','gender'],\n",
    "                     class_names=sorted(Y.unique()),\n",
    "                     label='all',rounded=True,filled=True)\n",
    "\n",
    "\n",
    "score                                                #printing the accuracy score of the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0970a47e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
